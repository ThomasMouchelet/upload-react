{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/Users/tmouchelet-admin/Documents/upload-node-master/frontend/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar aliases = ['stdin', 'stdout', 'stderr'];\n\nvar hasAlias = function hasAlias(opts) {\n  return aliases.some(function (alias) {\n    return opts[alias] !== undefined;\n  });\n};\n\nvar normalizeStdio = function normalizeStdio(opts) {\n  if (!opts) {\n    return;\n  }\n\n  var stdio = opts.stdio;\n\n  if (stdio === undefined) {\n    return aliases.map(function (alias) {\n      return opts[alias];\n    });\n  }\n\n  if (hasAlias(opts)) {\n    throw new Error(\"It's not possible to provide `stdio` in combination with one of \".concat(aliases.map(function (alias) {\n      return \"`\".concat(alias, \"`\");\n    }).join(', ')));\n  }\n\n  if (typeof stdio === 'string') {\n    return stdio;\n  }\n\n  if (!Array.isArray(stdio)) {\n    throw new TypeError(\"Expected `stdio` to be of type `string` or `Array`, got `\".concat(typeof stdio, \"`\"));\n  }\n\n  var length = Math.max(stdio.length, aliases.length);\n  return Array.from({\n    length: length\n  }, function (value, index) {\n    return stdio[index];\n  });\n};\n\nmodule.exports = normalizeStdio; // `ipc` is pushed unless it is already present\n\nmodule.exports.node = function (opts) {\n  var stdio = normalizeStdio(opts);\n\n  if (stdio === 'ipc') {\n    return 'ipc';\n  }\n\n  if (stdio === undefined || typeof stdio === 'string') {\n    return [stdio, stdio, stdio, 'ipc'];\n  }\n\n  if (stdio.includes('ipc')) {\n    return stdio;\n  }\n\n  return [].concat(_toConsumableArray(stdio), ['ipc']);\n};","map":null,"metadata":{},"sourceType":"script"}