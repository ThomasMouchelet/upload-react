{"ast":null,"code":"'use strict';\n\nvar _require = require('human-signals'),\n    signalsByName = _require.signalsByName;\n\nvar getErrorPrefix = function getErrorPrefix(_ref) {\n  var timedOut = _ref.timedOut,\n      timeout = _ref.timeout,\n      errorCode = _ref.errorCode,\n      signal = _ref.signal,\n      signalDescription = _ref.signalDescription,\n      exitCode = _ref.exitCode,\n      isCanceled = _ref.isCanceled;\n\n  if (timedOut) {\n    return \"timed out after \".concat(timeout, \" milliseconds\");\n  }\n\n  if (isCanceled) {\n    return 'was canceled';\n  }\n\n  if (errorCode !== undefined) {\n    return \"failed with \".concat(errorCode);\n  }\n\n  if (signal !== undefined) {\n    return \"was killed with \".concat(signal, \" (\").concat(signalDescription, \")\");\n  }\n\n  if (exitCode !== undefined) {\n    return \"failed with exit code \".concat(exitCode);\n  }\n\n  return 'failed';\n};\n\nvar makeError = function makeError(_ref2) {\n  var stdout = _ref2.stdout,\n      stderr = _ref2.stderr,\n      all = _ref2.all,\n      error = _ref2.error,\n      signal = _ref2.signal,\n      exitCode = _ref2.exitCode,\n      command = _ref2.command,\n      timedOut = _ref2.timedOut,\n      isCanceled = _ref2.isCanceled,\n      killed = _ref2.killed,\n      timeout = _ref2.parsed.options.timeout;\n  // `signal` and `exitCode` emitted on `spawned.on('exit')` event can be `null`.\n  // We normalize them to `undefined`\n  exitCode = exitCode === null ? undefined : exitCode;\n  signal = signal === null ? undefined : signal;\n  var signalDescription = signal === undefined ? undefined : signalsByName[signal].description;\n  var errorCode = error && error.code;\n  var prefix = getErrorPrefix({\n    timedOut: timedOut,\n    timeout: timeout,\n    errorCode: errorCode,\n    signal: signal,\n    signalDescription: signalDescription,\n    exitCode: exitCode,\n    isCanceled: isCanceled\n  });\n  var message = \"Command \".concat(prefix, \": \").concat(command);\n\n  if (error instanceof Error) {\n    error.originalMessage = error.message;\n    error.message = \"\".concat(message, \"\\n\").concat(error.message);\n  } else {\n    error = new Error(message);\n  }\n\n  error.command = command;\n  error.exitCode = exitCode;\n  error.signal = signal;\n  error.signalDescription = signalDescription;\n  error.stdout = stdout;\n  error.stderr = stderr;\n\n  if (all !== undefined) {\n    error.all = all;\n  }\n\n  if ('bufferedData' in error) {\n    delete error.bufferedData;\n  }\n\n  error.failed = true;\n  error.timedOut = Boolean(timedOut);\n  error.isCanceled = isCanceled;\n  error.killed = killed && !timedOut;\n  return error;\n};\n\nmodule.exports = makeError;","map":null,"metadata":{},"sourceType":"script"}