{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/tmouchelet-admin/Documents/upload-node-master/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/tmouchelet-admin/Documents/upload-node-master/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar os = require('os');\n\nvar defaultGateway = require('default-gateway');\n\nvar ipaddr = require('ipaddr.js');\n\nfunction findIp(gateway) {\n  var interfaces = os.networkInterfaces();\n  var gatewayIp = ipaddr.parse(gateway);\n  var ip; // Look for the matching interface in all local interfaces\n\n  Object.keys(interfaces).some(function (name) {\n    return interfaces[name].some(function (addr) {\n      var prefix = ipaddr.parse(addr.netmask).prefixLengthFromSubnetMask();\n      var net = ipaddr.parseCIDR(\"\".concat(addr.address, \"/\").concat(prefix));\n\n      if (net[0] && net[0].kind() === gatewayIp.kind() && gatewayIp.match(net)) {\n        ip = net[0].toString();\n      }\n\n      return Boolean(ip);\n    });\n  });\n  return ip;\n}\n\nfunction promise(_x) {\n  return _promise.apply(this, arguments);\n}\n\nfunction _promise() {\n  _promise = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(family) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return defaultGateway[family]();\n\n          case 3:\n            result = _context.sent;\n            return _context.abrupt(\"return\", findIp(result.gateway));\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this, [[0, 7]]);\n  }));\n  return _promise.apply(this, arguments);\n}\n\nfunction sync(family) {\n  try {\n    var result = defaultGateway[family].sync();\n    return findIp(result.gateway);\n  } catch (_) {}\n}\n\nvar internalIp = {};\n\ninternalIp.v6 = function () {\n  return promise('v6');\n};\n\ninternalIp.v4 = function () {\n  return promise('v4');\n};\n\ninternalIp.v6.sync = function () {\n  return sync('v6');\n};\n\ninternalIp.v4.sync = function () {\n  return sync('v4');\n};\n\nmodule.exports = internalIp;","map":null,"metadata":{},"sourceType":"script"}